#!/bin/bash
# Configure Nginx Proxy Manager via API
# Generated by Ansible - do not edit directly

set -e

NPM_URL="http://localhost:{{ npm_admin_port }}"
DEFAULT_EMAIL="{{ npm_default_email }}"
DEFAULT_PASSWORD="{{ npm_default_password }}"
NEW_EMAIL="{{ npm.admin_email }}"
NEW_PASSWORD="{{ npm.admin_password }}"

# Function to wait for NPM to be ready
wait_for_npm() {
    echo "Waiting for Nginx Proxy Manager to be ready..."
    while ! curl -s -f "${NPM_URL}/api/" > /dev/null 2>&1; do
        sleep 5
    done
    echo "NPM is ready!"
}

# Function to get auth token
get_token() {
    local email=$1
    local password=$2
    
    TOKEN=$(curl -s -X POST "${NPM_URL}/api/tokens" \
        -H "Content-Type: application/json" \
        -d "{\"identity\":\"${email}\",\"secret\":\"${password}\"}" | \
        jq -r '.token')
    
    if [ "${TOKEN}" = "null" ] || [ -z "${TOKEN}" ]; then
        return 1
    fi
    
    echo "${TOKEN}"
}

# Function to change admin password
change_admin_password() {
    local token=$1
    
    # Get admin user ID
    ADMIN_ID=$(curl -s -X GET "${NPM_URL}/api/users" \
        -H "Authorization: Bearer ${token}" | \
        jq -r '.[] | select(.email == "'${DEFAULT_EMAIL}'") | .id')
    
    if [ -z "${ADMIN_ID}" ]; then
        echo "Admin user not found, may already be changed"
        return 0
    fi
    
    # Update admin user
    curl -s -X PUT "${NPM_URL}/api/users/${ADMIN_ID}" \
        -H "Authorization: Bearer ${token}" \
        -H "Content-Type: application/json" \
        -d "{
            \"email\": \"${NEW_EMAIL}\",
            \"name\": \"Administrator\",
            \"is_disabled\": false,
            \"roles\": [\"admin\"]
        }"
    
    # Change password
    curl -s -X PUT "${NPM_URL}/api/users/${ADMIN_ID}/auth" \
        -H "Authorization: Bearer ${token}" \
        -H "Content-Type: application/json" \
        -d "{
            \"type\": \"password\",
            \"current\": \"${DEFAULT_PASSWORD}\",
            \"secret\": \"${NEW_PASSWORD}\"
        }"
}

# Function to create access list
create_access_list() {
    local token=$1
    local name=$2
    local networks=$3
    
    # Check if access list already exists
    ACCESS_LIST_ID=$(curl -s -X GET "${NPM_URL}/api/nginx/access-lists" \
        -H "Authorization: Bearer ${token}" | \
        jq -r --arg name "${name}" '.[] | select(.name == $name) | .id')
    
    if [ -n "${ACCESS_LIST_ID}" ]; then
        echo "Access list '${name}' already exists with ID: ${ACCESS_LIST_ID}"
        echo "${ACCESS_LIST_ID}"
        return 0
    fi
    
    # Create new access list
    RESPONSE=$(curl -s -X POST "${NPM_URL}/api/nginx/access-lists" \
        -H "Authorization: Bearer ${token}" \
        -H "Content-Type: application/json" \
        -d "{
            \"name\": \"${name}\",
            \"satisfy_any\": true,
            \"pass_auth\": false,
            \"items\": ${networks}
        }")
    
    ACCESS_LIST_ID=$(echo "${RESPONSE}" | jq -r '.id')
    echo "Created access list '${name}' with ID: ${ACCESS_LIST_ID}"
    echo "${ACCESS_LIST_ID}"
}

# Function to create proxy host
create_proxy_host() {
    local token=$1
    local service_json=$2
    
    local domain=$(echo "${service_json}" | jq -r '.domain')
    
    # Check if proxy host already exists
    EXISTING_ID=$(curl -s -X GET "${NPM_URL}/api/nginx/proxy-hosts" \
        -H "Authorization: Bearer ${token}" | \
        jq -r --arg domain "${domain}" '.[] | select(.domain_names[] == $domain) | .id')
    
    if [ -n "${EXISTING_ID}" ]; then
        echo "Proxy host for ${domain} already exists, updating..."
        
        # Update existing proxy host
        curl -s -X PUT "${NPM_URL}/api/nginx/proxy-hosts/${EXISTING_ID}" \
            -H "Authorization: Bearer ${token}" \
            -H "Content-Type: application/json" \
            -d "${service_json}"
    else
        echo "Creating proxy host for ${domain}..."
        
        # Create new proxy host
        curl -s -X POST "${NPM_URL}/api/nginx/proxy-hosts" \
            -H "Authorization: Bearer ${token}" \
            -H "Content-Type: application/json" \
            -d "${service_json}"
    fi
}

# Main execution
wait_for_npm

# Try to authenticate with default credentials first
echo "Attempting to authenticate..."
TOKEN=$(get_token "${DEFAULT_EMAIL}" "${DEFAULT_PASSWORD}")

if [ -z "${TOKEN}" ]; then
    # Try with new credentials (password may already be changed)
    TOKEN=$(get_token "${NEW_EMAIL}" "${NEW_PASSWORD}")
    
    if [ -z "${TOKEN}" ]; then
        echo "Failed to authenticate with either default or new credentials"
        exit 1
    fi
    
    echo "Authenticated with new credentials"
else
    echo "Authenticated with default credentials, changing password..."
    change_admin_password "${TOKEN}"
    
    # Re-authenticate with new credentials
    sleep 2
    TOKEN=$(get_token "${NEW_EMAIL}" "${NEW_PASSWORD}")
    
    if [ -z "${TOKEN}" ]; then
        echo "Failed to authenticate with new credentials after password change"
        exit 1
    fi
fi

# Create access lists
echo "Creating access lists..."

# Local network access list
LOCAL_NETWORKS='[
    {"type": "allow", "address": "{{ npm_local_network }}"}{% for ip in npm_additional_allowed_ips %},
    {"type": "allow", "address": "{{ ip }}"}{% endfor %}
]'

LOCAL_ACCESS_ID=$(create_access_list "${TOKEN}" "Local Network Only" "${LOCAL_NETWORKS}")

# Configure proxy hosts
echo "Configuring proxy hosts..."

{% for service in npm_services %}
echo "Processing {{ service.name }}..."

# Prepare access list ID
ACCESS_LIST_ID=""
{% if service.access_list_id == "local_only" %}
ACCESS_LIST_ID="${LOCAL_ACCESS_ID}"
{% elif service.access_list_id == "public" %}
ACCESS_LIST_ID="0"
{% endif %}

# Create proxy host configuration
PROXY_CONFIG=$(cat <<EOF
{
    "domain_names": ["{{ service.domain }}"],
    "forward_host": "{{ service.forward_host }}",
    "forward_port": {{ service.forward_port }},
    "forward_scheme": "{{ service.forward_scheme }}",
    "ssl_forced": {{ service.ssl_forced | lower }},
    "hsts_enabled": {{ npm_hsts_enabled | lower }},
    "hsts_subdomains": {{ npm_hsts_subdomains | lower }},
    "http2_support": {{ npm_http2_support | lower }},
    "block_exploits": {{ service.block_exploits | default(true) | lower }},
    "caching_enabled": false,
    "websocket_support": {{ service.websockets_support | default(false) | lower }},
    "access_list_id": ${ACCESS_LIST_ID},
    "advanced_config": {{ service.advanced_config | default('') | to_json }},
    "certificate_id": 0,
    "meta": {
        "letsencrypt_agree": true,
        "letsencrypt_email": "{{ npm_ssl_email }}"
    }
}
EOF
)

create_proxy_host "${TOKEN}" "${PROXY_CONFIG}"

# Request SSL certificate
PROXY_ID=$(curl -s -X GET "${NPM_URL}/api/nginx/proxy-hosts" \
    -H "Authorization: Bearer ${TOKEN}" | \
    jq -r '.[] | select(.domain_names[] == "{{ service.domain }}") | .id')

if [ -n "${PROXY_ID}" ]; then
    echo "Requesting SSL certificate for {{ service.domain }}..."
    
    curl -s -X POST "${NPM_URL}/api/nginx/proxy-hosts/${PROXY_ID}/certificates" \
        -H "Authorization: Bearer ${TOKEN}" \
        -H "Content-Type: application/json" \
        -d '{
            "provider": "letsencrypt",
            "letsencrypt_agree": true,
            "letsencrypt_email": "{{ npm_ssl_email }}",
            "dns_challenge": false
        }'
fi

sleep 2

{% endfor %}

echo "Configuration complete!"